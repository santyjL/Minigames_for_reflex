import random

import reflex as rx

from MiniGames.Components.class_base import classBase
from MiniGames.Components.modal import modal_ganastes, modal_perdistes
from MiniGames.Components.navbar import navbar
from MiniGames.routers import routers
from MiniGames.styles import Colores, Tama√±os, Tama√±osTexto, _hover_generico

textos_victoria: list[str]= [
    "¬°Incre√≠ble jugada! Has vencido con una l√≥gica imbatible.",
    "¬°Tu mente afilada como tijeras ha cortado cualquier duda, victoria tuya!",
    "Papel envolvi√≥ la estrategia enemiga. ¬°Qu√© movimiento maestro!",
    "Lagarto devora con astucia. ¬°El trono es tuyo!",
    "Spock mirar√≠a con orgullo tu victoria l√≥gica y aplastante.",
    "Tu piedra ha aplastado m√°s que rivales, ¬°ha cimentado tu triunfo!",
    "¬°Es oficial, eres un estratega digno de leyenda!"
    ]

texto_derrota: list[str] = [
    "Hoy no fue tu d√≠a, pero los grandes vuelven m√°s fuertes.",
    "Ca√≠ste, pero hasta Spock sabe que perder es aprender.",
    "Tu tijera fue desafilada... por esta vez.",
    "Lagarto fue aplastado, pero la pr√≥xima vez mordisquear√°s la victoria.",
    "El universo se inclin√≥ ante Spock, pero t√∫ te alzar√°s de nuevo.",
    "Piedra se quebr√≥ esta vez, pero hay muchas m√°s en el camino.",
    "No fue suficiente, pero como dicen, ¬°cada derrota es una lecci√≥n!"
    ]


class EstadoJuego(classBase):
    jugada_npc:str= "?"
    jugada_jugador:str= "?"
    puntuacion_npc:int= 0
    puntuacion_jugador:int= 0

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def logica(self):
        if self.puntuacion_jugador < 4:
            match (self.jugada_jugador, self.jugada_npc):
                case (jugada, npc) if jugada == npc:
                    pass

                case ("ü•å", "‚úÇ") | ("ü•å", "ü¶é"):
                    self.puntuacion_jugador += 1

                case ("‚úÇ", "üìã") | ("‚úÇ", "ü¶é"):
                    self.puntuacion_jugador += 1

                case ("üìã", "ü•å") | ("üìã", "üññ"):
                    self.puntuacion_jugador += 1

                case ("ü¶é", "üìã") | ("ü¶é", "üññ"):
                    self.puntuacion_jugador += 1

                case ("üññ", "ü•å") | ("üññ", "‚úÇ"):
                    self.puntuacion_jugador += 1

                case _:
                    self.puntuacion_npc += 1
        else:
            self.puntuacion_jugador += 1
            self.mostrar_modal_ganastes = True

        if self.puntuacion_npc > 4 :
            self.mostrar_modal_perdistes = True


    def npc(self):
        self.jugada_npc = random.choice(["ü•å","üìã","‚úÇ","ü¶é","üññ"])

    def piedra(self):
        self.jugada_jugador = "ü•å"
        self.npc()
        self.logica()

    def papel(self):
        self.jugada_jugador = "üìã"
        self.npc()
        self.logica()

    def tijeras(self):
        self.jugada_jugador = "‚úÇ"
        self.npc()
        self.logica()

    def lagarto(self):
        self.jugada_jugador = "ü¶é"
        self.npc()
        self.logica()

    def spock(self):
        self.jugada_jugador = "üññ"
        self.npc()
        self.logica()

    def reiniciar_juego(self):
        self.jugada_npc:str= "?"
        self.jugada_jugador:str= "?"
        self.puntuacion_npc:int= 0
        self.puntuacion_jugador:int= 0
        self.mostrar_modal_perdistes= False
        self.mostrar_modal_ganastes= False

    @rx.var
    def var_jugada_npc(self) -> str:
        return self.jugada_npc

    @rx.var
    def var_jugada_jugador(self) -> str:
        return self.jugada_jugador

    @rx.var
    def var_puntuacion_jugador(self) -> int:
        return self.puntuacion_jugador

    @rx.var
    def var_puntuacion_npc(self) -> int:
        return self.puntuacion_npc

# Funci√≥n para crear los botones con los emojis de las jugadas
def botones(emoji: str , event:EstadoJuego) -> rx.Component:
    """Crea un bot√≥n con un emoji representando una jugada."""
    return rx.button(
        rx.text(
            emoji,
            font_size=Tama√±osTexto.SUBTITULO.value
        ),
        font_size=["16px", "18px", "20px"],
        bg=Colores.SECUNDARIO.value,
        border_radius=Tama√±os.BORDER_RADIUS.value,
        padding=Tama√±os.PADDING.value,
        border=Tama√±os.BORDER.value,
        on_click=event,
        _hover=_hover_generico
    )

# Funci√≥n para mostrar la puntuaci√≥n
def puntuacion(texto: str, valor:EstadoJuego) -> rx.Component:
    """Muestra un cuadro con el texto (nombre del jugador/NPC) y su puntuaci√≥n."""
    return rx.box(
        # Texto que muestra el nombre (NPC o T√∫)
        rx.text(
            texto,
            font_size=Tama√±osTexto.TEXTO.value,
            color=Colores.TITULO.value,
            align="center"
        ),
        # Cuadro con la puntuaci√≥n num√©rica
        rx.box(
            rx.text(
                valor,
                font_size=["80px", "100px", "120px"],
                color=Colores.TITULO.value,
                align="center",
                _hover=_hover_generico,
            ),
            bg=Colores.BG_COMPONENTES.value,
            border_radius=Tama√±os.BORDER_RADIUS,
            border=Tama√±os.BORDER.value,
            padding=Tama√±os.PADDING.value,
            width="15vw"
        ),
        _hover=_hover_generico
    )

# Funci√≥n para mostrar las reglas del juego
def sistema_de_victoria_text() -> rx.Component:
    """Muestra un cuadro con las reglas de qui√©n gana a qui√©n en el juego."""
    reglas = [
        "ü•å  >>  ‚úÇ",  # Piedra aplasta Tijeras
        "ü•å  >>  ü¶é",  # Piedra aplasta Lagarto
        "‚úÇ  >>  ü¶é",  # Tijeras decapitan Lagarto
        "‚úÇ  >>  üìã",  # Tijeras cortan Papel
        "üìã  >>  ü•å",  # Papel envuelve Piedra
        "üìã  >>  üññ",  # Papel refuta a Spock
        "ü¶é  >>  üìã",  # Lagarto devora Papel
        "ü¶é  >>  üññ",  # Lagarto envenena a Spock
        "üññ  >>  ü•å",  # Spock vaporiza Piedra
        "üññ  >>  ‚úÇ",  # Spock rompe Tijeras
    ]

    return rx.center(
            rx.box(
            # Iteramos sobre la lista de reglas para generar los textos
            *(rx.text(regla,
                    font_size=Tama√±osTexto.SUBTITULO.value,
                    color=Colores.TEXTO.value,
                    align="center") for regla in reglas),
            height="auto",
            width="20vw",
            bg=Colores.BG_COMPONENTES.value,
            margin=Tama√±os.MARGIN_MEDIANO.value,
            padding= Tama√±os.PADDING.value
        )
    )

# Bloque principal del juego con las jugadas del NPC y del jugador, y los botones para elegir jugada
def bloque_juego() -> rx.Component:
    """Genera el bloque central del juego, incluyendo las jugadas y los botones."""
    return rx.center(
        rx.box(
            rx.hstack(
                # Flex para las jugadas del NPC y del jugador
                rx.flex(
                    # Jugada del NPC
                    rx.box(
                        rx.text(EstadoJuego.jugada_npc, font_size=["80px", "100px", "120px"], color="white"),
                        bg=Colores.PRINCIPAL.value,
                        padding=Tama√±os.PADDING.value,
                        border_radius=Tama√±os.BORDER_RADIUS.value,
                        border=Tama√±os.BORDER.value,
                        justify="center",
                        align_items="center",
                        text_align="center",
                        width="95%",
                        height="45%",
                        margin=Tama√±os.MARGIN_PEQUE√ëO.value
                    ),
                    # Jugada del Jugador
                    rx.box(
                        rx.text(EstadoJuego.jugada_jugador, font_size=["80px", "100px", "120px"], color="white"),
                        bg=Colores.PRINCIPAL.value,
                        padding=Tama√±os.PADDING.value,
                        border_radius=Tama√±os.BORDER_RADIUS.value,
                        border=Tama√±os.BORDER.value,
                        justify="center",
                        align_items="center",
                        text_align="center",
                        width="95%",
                        height="45%",
                        margin=Tama√±os.MARGIN_PEQUE√ëO.value
                    ),
                    direction="column",
                    justify="center",
                    align_items="center",
                    width="55%",
                    bg=Colores.SECUNDARIO.value,
                    border_radius=Tama√±os.BORDER_RADIUS.value,
                    border=Tama√±os.BORDER.value
                ),
                rx.separator(orientation="horizontal", size="3"),
                # Flex para los botones de jugadas
                rx.flex(
                    botones("ü•å", EstadoJuego.piedra),  # Bot√≥n Piedra
                    botones("üìã", EstadoJuego.papel),  # Bot√≥n Papel
                    botones("‚úÇÔ∏è", EstadoJuego.tijeras),  # Bot√≥n Tijeras
                    botones("ü¶é", EstadoJuego.lagarto),  # Bot√≥n Lagarto
                    botones("üññ", EstadoJuego.spock),  # Bot√≥n Spock
                    direction="column",
                    justify="center",
                    align_items="center",
                    gap="10px",
                    width="25vw"
                ),
                width="100vw",
                height="100vh",
                justify_content="space-between",
                align_items="center"
            ),
            bg=Colores.BG_COMPONENTES.value,
            width="55vw",
            height="80vh",
            padding=Tama√±os.PADDING.value,
            display="flex",
            justify="center",
            align_items="center"
        )
    )

# Componente que representa la disposici√≥n principal del juego en pantallas m√°s grandes
def desktop_juegos() -> rx.Component:
    return rx.desktop_only(
        rx.hstack(
            rx.vstack(
                puntuacion("NPC", EstadoJuego.puntuacion_npc),
                puntuacion("T√∫", EstadoJuego.puntuacion_jugador),
                margin_x=Tama√±os.MARGIN_MEDIANO.value
            ),
            bloque_juego(),
            rx.center(
                sistema_de_victoria_text(),
            ),
            margin_y=25
        )
    )

def mobile_and_tablets_juegos() -> rx.Component:
    return rx.mobile_and_tablet(
        bloque_juego(),
        rx.hstack(
                puntuacion("NPC", EstadoJuego.puntuacion_npc),
                puntuacion("T√∫", EstadoJuego.puntuacion_jugador),
                margin_x=Tama√±os.MARGIN_MEDIANO.value,

        ),
        margin_y=25
    )

# P√°gina del juego
@rx.page(route=routers.PIEDRA_PAPEL_TIJERAS.value)
def pantalla_juego2() -> rx.Component:
    """P√°gina que contiene el juego 'Piedra, Papel, Tijeras, Lagarto, Spock'."""
    return rx.box(
        rx.vstack(
            navbar(),
            rx.box(
                desktop_juegos(),
                mobile_and_tablets_juegos(),
            ),
            modal_ganastes(EstadoJuego, random.choice(textos_victoria)),
            modal_perdistes(EstadoJuego, random.choice(texto_derrota)),
            align_items="stretch"
        ),
        bg=Colores.BG.value,
        background_size="cover",
        min_height="100vh"
    )
